/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by injection-gen. DO NOT EDIT.

package kafkachannel

import (
	"context"
	"github.com/kyma-incubator/knative-kafka/components/controller/constants"
	"github.com/kyma-incubator/knative-kafka/components/controller/pkg/env"
	"go.uber.org/zap"
	"k8s.io/client-go/tools/cache"
	"knative.dev/eventing/pkg/logging"

	kafkaadmin "github.com/kyma-incubator/knative-kafka/components/common/pkg/kafka/admin"
	v1alpha1 "github.com/kyma-incubator/knative-kafka/components/controller/pkg/apis/knativekafka/v1alpha1"
	kafkachannel "github.com/kyma-incubator/knative-kafka/components/controller/pkg/client/injection/reconciler/knativekafka/v1alpha1/kafkachannel"
	listers "github.com/kyma-incubator/knative-kafka/components/controller/pkg/client/listers/knativekafka/v1alpha1"
	v1 "k8s.io/api/core/v1"
	appsv1listers "k8s.io/client-go/listers/apps/v1"
	corev1listers "k8s.io/client-go/listers/core/v1"
	eventingreconciler "knative.dev/eventing/pkg/reconciler"
	reconciler "knative.dev/pkg/reconciler"
)

// newReconciledNormal makes a new reconciler event with event type Normal, and
// reason KafkaChannelReconciled.
func newReconciledNormal(namespace, name string) reconciler.Event {
	return reconciler.NewEvent(v1.EventTypeNormal, "KafkaChannelReconciled", "KafkaChannel reconciled: \"%s/%s\"", namespace, name)
}

// Check that our Reconciler implements Interface
var _ kafkachannel.Interface = (*Reconciler)(nil)

// Optionally check that our Reconciler implements Finalizer
//var _ kafkachannel.Finalizer = (*Reconciler)(nil)

// ReconcileKind implements Interface.ReconcileKind.
func (r *Reconciler) ReconcileKind(ctx context.Context, kafkachannel *v1alpha1.KafkaChannel) reconciler.Event {
	r.Logger.Debug("<==========  START CHANNEL RECONCILIATION  ==========>")

	// Reset The Channel's Status Conditions To Unknown (Addressable, Topic, Service, Deployment, etc...)
	kafkachannel.Status.InitializeConditions()
	kafkachannel.Status.ObservedGeneration = kafkachannel.Generation

	// Perform The Channel Reconciliation
	r.Logger.Info("Channel Owned By Controller - Reconciling", zap.Any("Channel.Spec", channel.Spec))
	err = r.reconcile(ctx, kafkachannel)
	if err != nil {
		r.Logger.Error("Failed To Reconcile Channel", zap.Error(err))
		// Note: Do NOT Return Error Here In Order To Ensure Status Update
	} else {
		r.Logger.Info("Successfully Reconciled Channel", zap.Any("Channel", channel))
	}

	updateStatusErr := r.updateChannelStatus(ctx, channel)
	if updateStatusErr != nil {
		r.Recorder.Eventf(channel, corev1.EventTypeWarning, event.ChannelUpdateFailed.String(), "Failed To Update Channel Status: %v", err)
		r.Logger.Error("Failed To Update Channel Status", zap.Error(updateStatusErr))
		return reconcile.Result{}, updateStatusErr
	}

	kafkachannel.Status.ObservedGeneration = kafkachannel.Generation
	return newReconciledNormal(kafkachannel.Namespace, kafkachannel.Name)
}

func (r *Reconciler) FinalizeKind(ctx context.Context, kafkachannel *v1alpha1.KafkaChannel) reconciler.Event {
	// Get The TopicName For Specified Channel
	topicName := util.TopicName(kafkachannel)
	err = r.deleteTopic(ctx, topicName)
	if err != nil {
		return err
	}
	return reconciler.NewEvent(v1.EventTypeNormal, fmt.Printf("Topic %s deleted during finalization", topicName))
}
